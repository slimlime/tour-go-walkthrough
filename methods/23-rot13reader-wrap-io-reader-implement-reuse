package main

import (
	"fmt"
	"io"
	"os"
	"strings"
)

type rot13Reader struct {
	r io.Reader
}

func (rot13r *rot13Reader) Read(bytes []byte) (numBytes int, error error) {
	numBytes, err := rot13r.r.Read(bytes)
	if err != nil {
		// Doco mentions not to hardcode a `(0, nil)` return
		// Due to what that represents.
		// 0, nil expresses no work done. 0 bytes. no EOF
		return numBytes, err
	}

	fmt.Println(numBytes, err, string(bytes), bytes)

	for i, val := range bytes {
		bytes[i] = rot13(val)
	}
	// Implementations must not retain p pointer to bytes array?

	return numBytes, nil
}

// Simple rotation cipher per alphabet character
// Does not currently include special characters or other charset
// @param asciiCode the character code according to ASCII set
// @param the number of alphabet placements to rotate i.e. rot13 13 positions. Used for modulo
// Rot = rot = rotations, per cipher convention rot13 abbreviation
func rot(asciiCode byte, numRot int) byte {
	// Explicitly listing const usages for easy refactor later.
	const uppercaseAlphabetStart = 'A'
	const uppercaseAlphabetEnd = 'Z'
	const lowercaseAlphabetStart = 'a'
	const lowercaseAlphabetEnd = 'z'
	const caseInsensitiveAlphabetCount = 26

	// Shortened aliases
	const upStart = uppercaseAlphabetStart
	const upEnd = uppercaseAlphabetEnd
	const lowStart = lowercaseAlphabetStart
	const lowEnd = lowercaseAlphabetEnd
	const alphabetCount = 26

	// Note closed-closed inclusive range.
	// For clarity of the a to z ranges
	switch {
	case asciiCode >= upStart && asciiCode <= upEnd:
		return transposeLetterByte(asciiCode, upStart, numRot)

	case asciiCode >= lowStart && asciiCode <= lowEnd:
		return transposeLetterByte(asciiCode, lowStart, numRot)

	default:
		// Do nothing
		return asciiCode
	}

}

// Wrapper coercion byte int casting helper utility fn
// Golang does not have function overloading
// Helper to help caller usage with bytes reader.
func transposeLetterByte(asciiCode byte, startCode int, numRot int) byte {
	return byte(transposeLetter(int(asciiCode), startCode, numRot))
}
// Transpose letter according to alphabet ascii set
//
func transposeLetter(asciiCode int, startCode int, numRot int) int {

	// Alphabet is a constant.
	// ASCII subset is likewise strongly-dependent on
	// English alphabet is unlikely to suddenly evolve additional letters in society.
	const alphabetCount = 26

	// Alphabet count modulo serves to wrap around to fulfil the
	// full circular 'rotation' convention of the transposition

	// See example: `byte(upStart + ((int(asciiCode) - upStart + numRot) % alphabetCount))`
	return startCode + ((asciiCode - startCode + numRot) % alphabetCount)
}

// Helper fn rot13 letter substitution cipher
func rot13(asciiCode byte) byte {
	const letterPositionRotations = 13

	return rot(asciiCode, letterPositionRotations)
}

func main() {
	// "You cracked the code!"
	// 65 A start of alphabet capitals
	// Also wrap the 26 lowercase?

	s := strings.NewReader("Lbh penpxrq gur pbqr!")
	r := rot13Reader{s}
	io.Copy(os.Stdout, &r)
}

